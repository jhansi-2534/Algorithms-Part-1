#include  <iostream>
#include <vector>
#include <limits.h>
#include <stdio.h>

using namespace std;

class UnionFind{
    private:
       vector<int>parent;
       vector<int>rank;
    public:
       UnionFind(int n){
         parent.resize(n+1);
         rank.resize(n+1);
         for(int i=0;i<=n;i++){
            parent[i]=i;
         }
       }
       int Find(int x){
        if(parent[x]!=x)
        {
            parent[x]=Find(parent[x]);
        }
        return parent[x];
       }
       void Union(int x,int y){
        int rootX=Find(x);
        int rootY=Find(y);
        if(rootX==rootY){
             return ;
        }
        if(rank[rootX]<rank[rootY]){
            parent[rootX]=rootY;
        }
        else if (rank[rootX]>rank[rootY]){
            parent[rootY]=rootX;
        }
        else{
            parent[rootY]=rootX;
            rank[rootX]++;
        }
       }
};
int findearliestfriendshiptimestamp(int N,vector<pair<int, pair<int,int>>>&friendships){
    UnionFind G(N);
    int count=0;

    for(auto &friendship :friendships){
        int timestamp=friendship.first;
        int p1=friendship.second.first;
        int p2=friendship.second.second;
        if(G.Find(p1)!=G.Find(p2)){
            G.Union(p1,p2);
            count++;

            if(count==N-1){
                return timestamp;
            }
        }
    }
    return INT_MAX;
}
int main(){
    int N=4;
    vector<pair<int,pair<int,int>>>friendships={
       {1,{1,2}},
       {2,{2,3}},
       {3,{1,3}},
       {4,{4,1}}
    };
    int earliesttimestamp=findearliestfriendshiptimestamp(N,friendships);
    if(earliesttimestamp==INT_MAX){
        cout<<"All individuals are friends."<<endl;
    }
    else{
        cout<<"Earliest timestamp at which individuals are friends:"<<earliesttimestamp<<endl;
    }
    return 0;
}
